{
  "openapi": "3.0.1",
  "info": {
    "title": "Connect API",
    "version": "2.0"
  },
  "paths": {
    "/v2/automation/webhooks": {
      "post": {
        "tags": [
          "AutomationWebhooks"
        ],
        "summary": "Create Webhook",
        "description": "Create a new Webhook for the storefront specified.\r\n\r\nPossible Events to Subscribe To:\r\n\r\nORDER_CREATED,\r\nORDER_UPDATED,\r\nORDER_FULFILLED,\r\nORDER_SHIPPED,\r\nORDER_RECEIVED,\r\nORDER_CANCELLED,\r\n\r\nORDER_SPLIT,\r\nORDER_RESHIPPED,\r\n\r\nSHIPMENT_CREATED,\r\nSHIPMENT_UPDATED,\r\nSHIPMENT_RECEIVED,\r\nSHIPMENT_SHIPPED,\r\nSHIPMENT_CANCELLED,\r\n\r\nBULK_SHIPMENT_CREATED,\r\nBULK_SHIPMENT_SHIPPED,\r\nBULK_SHIPMENT_UPDATED",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationWebhookDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationWebhookDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationWebhookDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationWebhookDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationWebhookDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AutomationWebhooks"
        ],
        "summary": "Update Webhook",
        "description": "Update an existing Webhook",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationWebhookDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationWebhookDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationWebhookDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationWebhookDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationWebhookDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "AutomationWebhooks"
        ],
        "summary": "List Webhooks",
        "description": "Obtains a list of Webhooks that match the specified criteria.",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationWebhookDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationWebhookDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/automation/webhooks/{id}": {
      "get": {
        "tags": [
          "AutomationWebhooks"
        ],
        "summary": "Get Webhook",
        "description": "Get specific Item by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationWebhookDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationWebhookDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get Brands",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrandDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrandDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/bulkShipments": {
      "post": {
        "tags": [
          "BulkShipments"
        ],
        "summary": "Create Bulk Shipment",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkShipmentDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkShipmentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkShipmentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkShipmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "BulkShipments"
        ],
        "summary": "List Bulk Shipments",
        "description": "Obtains a list of Bulk Shipments that match the specified criteria.",
        "parameters": [
          {
            "name": "BrandId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WarehouseId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkShipmentDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkShipmentDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/bulkShipments/{id}": {
      "get": {
        "tags": [
          "BulkShipments"
        ],
        "summary": "Get Bulk Shipment",
        "description": "Get specific Item by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkShipmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkShipmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/inventory/adjustments/{id}": {
      "get": {
        "tags": [
          "InventoryAdjustments"
        ],
        "summary": "Get Inventory Adjustment",
        "description": "Get specific Item by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAdjustmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAdjustmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/inventory/adjustments": {
      "get": {
        "tags": [
          "InventoryAdjustments"
        ],
        "summary": "List Inventory Adjustments",
        "description": "Obtains a list of Inventory Adjustments that match the specified criteria.",
        "parameters": [
          {
            "name": "BrandId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WarehouseId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WarehouseProductId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Item",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Can be:\r\n\r\nReduce = 0\r\n\r\nIncrease = 1",
            "schema": {
              "$ref": "#/components/schemas/DIUUpdateType"
            }
          },
          {
            "name": "ReferenceNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Reason",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAdjustmentDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAdjustmentDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orderGroups": {
      "post": {
        "tags": [
          "OrderGroups"
        ],
        "summary": "Create Order Group",
        "description": "Create a new Order Group for the storefront specified.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroupDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroupDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroupDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "OrderGroups"
        ],
        "summary": "Update Order Group",
        "description": "Update an existing Order Group",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroupDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroupDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroupDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "OrderGroups"
        ],
        "summary": "List Order Groups",
        "description": "Obtains a list of Order Groups that match the specified criteria.",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orderGroups/{id}": {
      "get": {
        "tags": [
          "OrderGroups"
        ],
        "summary": "Get Order Group",
        "description": "Get specific Item by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "OrderGroups"
        ],
        "summary": "Delete Order Group",
        "description": "This endpoint soft deletes the Order Group with the specified ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orderReturns/{id}": {
      "get": {
        "tags": [
          "OrderReturns"
        ],
        "summary": "Get Order Return",
        "description": "Get specific Item by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orderReturns": {
      "get": {
        "tags": [
          "OrderReturns"
        ],
        "summary": "List Order Returns",
        "description": "Obtains a list of Order Returns that match the specified criteria.",
        "parameters": [
          {
            "name": "CreateDateStart",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreateDateEnd",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ReceiveDateStart",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ReceiveDateEnd",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StorefrontId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WarehouseId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sku",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ReferenceNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/createorders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create Multiple Orders",
        "description": "This method can be used to create new orders or update existing orders.\r\n\r\nIf the id is specified, Connect will also attempt to locate the order with the specified id, and will update it. If the order cannot be found, it will throw an error.\r\n\r\nMax 50 entities allowed to be sent in a single request!",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrderProcessingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrderProcessingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/updateorders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Update Multiple Orders",
        "description": "This method can be used to bulk update existing orders.\r\n\r\nIf the id is specified, Connect will attempt to locate the order with the specified id, and will update it. If the order key is specified, it will update the order with that key. \r\nIf the order cannot be found, it will throw an error.\r\n\r\nMax 50 entities allowed to be sent in a single request!",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrderProcessingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrderProcessingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/createorder": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create or Update a Single Order",
        "description": "This method can be used to create new orders or update existing orders.\r\n\r\nIf the id is specified, Connect will attempt to locate the order with the specified id, and will update it. If the order cannot be found, it will throw an error.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderProcessingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderProcessingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update an Order",
        "description": "This method can be used to update an existing order. Must specify the Order Id or the Order Key.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "List Orders",
        "description": "Obtains a list of orders that match the specified criteria. All of the available filters are optional.",
        "parameters": [
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: OrderDate (default), CreateDate, ModifyDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreateDateStart",
            "in": "query",
            "description": "All date filters are treated as US Central timezone.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreateDateEnd",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ModifyDateStart",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ModifyDateEnd",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MinutesSinceChange",
            "in": "query",
            "description": "Gets orders changed in the last X minutes. Must be over 0 if set, and less or equal to 10080 (7 days).\r\n\r\nThis field is ignored if ModifyDateStart or ModifyDateEnd are set.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderDateStart",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderDateEnd",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ShipDateStart",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ShipDateEnd",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderStatus",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StoreId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StorefrontId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{orderId}/customdata": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update an Orders Custom Data",
        "description": "This method can be used to update an existing order. Must specify the Order Id.\r\n\r\nNote that this method will only update the custom data, and will not update any other fields on the order.\r\n\r\nAlso you can use this endpoint for orders that are being created outside the API, like via ShipStation!",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderCustomDataDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderCustomDataDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderCustomDataDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderCustomDataDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{orderId}": {
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete Order",
        "description": "Removes order from the UI and API. Note this is a \"soft\" delete action so the order will still exist in the database, but will be set to inactive.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order",
        "description": "Retreives a specific order via the Order ID.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{orderId}/removeTag/{tagId}": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Remove Tag to Order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{orderId}/addTag/{tagId}": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add Tag to Order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{orderId}/markShipped": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Mark Shipped by OrderId",
        "description": "Can be called multiple times. Creates a Shipment Entity.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderAsShippedByOrderIdRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderAsShippedByOrderIdRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderAsShippedByOrderIdRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderAsShippedByOrderIdRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{orderId}/orderStatus": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update Status by OrderId",
        "description": "Can be:\r\n\r\n- awaiting_payment\r\n- awaiting_shipment\r\n- on_hold\r\n- pending_fulfillment\r\n- shipped\r\n- cancelled",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderStatusRequestByOrderIdDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderStatusRequestByOrderIdDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderStatusRequestByOrderIdDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderStatusRequestByOrderIdDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orderTags": {
      "post": {
        "tags": [
          "OrderTags"
        ],
        "summary": "Create Order Tag",
        "description": "Create a new Order Tag for the storefront specified.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTagDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTagDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "OrderTags"
        ],
        "summary": "Update Order Tag",
        "description": "Update an existing Order Tag",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "OrderTags"
        ],
        "summary": "List Order Tags",
        "description": "Obtains a list of Order Tags that match the specified criteria.",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTagDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTagDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orderTags/{id}": {
      "get": {
        "tags": [
          "OrderTags"
        ],
        "summary": "Get Order Tag",
        "description": "Get specific Item by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderGroupDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "OrderTags"
        ],
        "summary": "Delete Order Tag",
        "description": "This endpoint soft deletes the Order Tag with the specified ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchaseOrders/{id}": {
      "get": {
        "tags": [
          "PurchaseOrders"
        ],
        "summary": "Get PO",
        "description": "Get specific Item by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchaseOrders": {
      "post": {
        "tags": [
          "PurchaseOrders"
        ],
        "summary": "Create PO",
        "description": "Create an PO going to an Connect managed Warehouse",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderDtoGenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderDtoGenericSuccessMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "PurchaseOrders"
        ],
        "summary": "List POs",
        "description": "Obtains a list of Purchase Orders that match the specified criteria.",
        "parameters": [
          {
            "name": "Status",
            "in": "query",
            "description": "Order Status: \r\n\r\n\r\n       0 - Open, awaiting for items to ship\r\n       1 - Requested\r\n       2 - Denied\r\n       3 - Completed\r\n       4 - Canceled\r\n       5 - Active\r\n       6 - On hold (awaiting approval)",
            "schema": {
              "$ref": "#/components/schemas/PurchaseOrderState"
            }
          },
          {
            "name": "BrandId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Item",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchaseOrders/{id}/complete": {
      "put": {
        "tags": [
          "PurchaseOrders"
        ],
        "description": "Mark PO as Complete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchaseOrders/{id}/cancel": {
      "put": {
        "tags": [
          "PurchaseOrders"
        ],
        "description": "Cancel PO",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/rates/orders/estimate": {
      "post": {
        "tags": [
          "Rates"
        ],
        "summary": "Get Rate Estimates (experimental)",
        "description": "Get shipping estimates, for the given request.\r\nPlease note that this endpoint is experimental and breaking changes to it are expected.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StorefrontOrderRateEstimationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorefrontOrderRateEstimationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StorefrontOrderRateEstimationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StorefrontOrderRateEstimationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEstimationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEstimationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/shipments/{shipmentId}": {
      "get": {
        "tags": [
          "Shipments"
        ],
        "summary": "Get Shipment",
        "description": "Get specific Shipment by ShipmentID.",
        "parameters": [
          {
            "name": "shipmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/shipments": {
      "get": {
        "tags": [
          "Shipments"
        ],
        "summary": "List Shipments",
        "description": "Obtains a list of shipments that match the specified criteria. All of the available filters are optional.",
        "parameters": [
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default), ShipDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreateDateStart",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreateDateEnd",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MinutesSinceCreated",
            "in": "query",
            "description": "Gets shipments created in the last X minutes. Must be over 0 if set, and less or equal to 10080 (7 days).\r\n\r\nThis field is ignored if CreateDateStart or CreateDateEnd are set.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ShipDateStart",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ShipDateEnd",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TrackingNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StorefrontId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/reports/warehouseStatistics": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Warehouse Items Statistics [deprecated]",
        "description": "Get the inventory status, on hand qty, available qty and more. Note that this report is automatically generated every 30 minutes.\r\n\r\nIMPORTANT: This endpoint is deprected. We do not recommend using it if you are only now implementing this API.",
        "parameters": [
          {
            "name": "StorefrontId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sku",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed: sku, description, quantityOnHand, quantityAvailable",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "PerPage",
            "in": "query",
            "description": "Min: 1, Max: 500",
            "schema": {
              "type": "integer",
              "description": "Min: 1, Max: 500",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "SortDesc",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseItemStatsDtoPaginatedItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "If filters are not correct"
          }
        }
      }
    },
    "/v2/reports/productsStatistics": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Store Products Statistics",
        "description": "Get the inventory status, on hand qty, available qty and more.",
        "parameters": [
          {
            "name": "StorefrontId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sku",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed: sku, name, quantityOnHand, quantityAvailable",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "PerPage",
            "in": "query",
            "description": "Min: 1, Max: 500",
            "schema": {
              "type": "integer",
              "description": "Min: 1, Max: 500",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "SortDesc",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreProductStatsDtoPaginatedItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "If filters are not correct"
          }
        }
      }
    },
    "/v2/storefrontProducts": {
      "post": {
        "tags": [
          "StorefrontProducts"
        ],
        "summary": "Create Storefront Product",
        "description": "Create a new Storefront Product.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorefrontProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontProductDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "StorefrontProducts"
        ],
        "summary": "Update Storefront Product",
        "description": "Update an existing Storefront Product.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StorefrontProductDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorefrontProductDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StorefrontProductDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StorefrontProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontProductDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "StorefrontProducts"
        ],
        "summary": "List Storefront Products",
        "description": "Obtains a list of Storefront Products that match the specified criteria.",
        "parameters": [
          {
            "name": "StorefrontId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sku",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontProductDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontProductDtoPaginatedItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/storefrontProducts/{id}": {
      "get": {
        "tags": [
          "StorefrontProducts"
        ],
        "summary": "Get Storefront Product",
        "description": "Get specific Storefront Product by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontProductDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StorefrontProducts"
        ],
        "summary": "Delete Storefront Product",
        "description": "This endpoint soft deletes the Storefront Product with the specified ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/storefronts/{id}": {
      "get": {
        "tags": [
          "Storefronts"
        ],
        "summary": "Get Storefront",
        "description": "Get specific Storefront by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/storefronts": {
      "get": {
        "tags": [
          "Storefronts"
        ],
        "summary": "List Storefronts",
        "description": "Obtains a list of Storefronts that match the specified criteria.",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontDtoPaginatedItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/vendors": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Get Vendors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/warehouseProducts": {
      "post": {
        "tags": [
          "WarehouseProducts"
        ],
        "summary": "Create Warehouse Product",
        "description": "Create a new Warehouse Product.\r\n\r\nThis endpoint sets the inventory info to 0. \r\n\r\nYou will need to hit the Update Inventory Summary endpoint to update inventory after the item is created.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseProductDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WarehouseProducts"
        ],
        "summary": "Update Warehouse Product",
        "description": "Update an existing Warehouse Product.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseProductDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseProductDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseProductDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseProductDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "WarehouseProducts"
        ],
        "summary": "List Warehouse Products",
        "description": "Obtains a list of Warehouse Products that match the specified criteria.",
        "parameters": [
          {
            "name": "Item",
            "in": "query",
            "description": "Item SKU of the Warehouse Product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WarehouseProductId",
            "in": "query",
            "description": "Id of the Warehouse Product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WarehouseId",
            "in": "query",
            "description": "Id of the Warehouse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BrandId",
            "in": "query",
            "description": "Id of the Brand",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseProductDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseProductDtoPaginatedItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/warehouseProducts/inventorySummary": {
      "put": {
        "tags": [
          "WarehouseProducts"
        ],
        "summary": "Update Inventory Summary for a Warehouse Product",
        "description": "Update inventory summary for existing Warehouse Product.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseProductInventorySummaryRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseProductInventorySummaryRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseProductInventorySummaryRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseProductInventorySummaryRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseProductDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/warehouseProducts/{id}": {
      "get": {
        "tags": [
          "WarehouseProducts"
        ],
        "summary": "Get Warehouse Product",
        "description": "Get specific Warehouse Product by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseProductDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseProductDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WarehouseProducts"
        ],
        "summary": "Delete Warehouse Product",
        "description": "This endpoint soft deletes the Warehouse Product with the specified ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/warehouseProducts/inventory/byLocation": {
      "get": {
        "tags": [
          "WarehouseProducts"
        ],
        "summary": "Granulated Inventory Info",
        "description": "Obtains the inventory info split by to the shipment, lot number, warehouse location and pallet ID.\r\n\r\nThis data updates only once very 60 minutes. We do not recommend hitting this endpoint often, as the info is not real time\r\nunlike the inventorySummary endpoint which should report realtime data from the warehouse.\r\n\r\nExpect that the total, by SKU, from this endpoint can be slightly off compared to the inventory summary, depending on what snapshot you are looking at.",
        "parameters": [
          {
            "name": "Item",
            "in": "query",
            "description": "Item SKU of the Warehouse Product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WarehouseProductId",
            "in": "query",
            "description": "Id of the Warehouse Product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WarehouseId",
            "in": "query",
            "description": "Id of the Warehouse",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BrandId",
            "in": "query",
            "description": "Id of the Brand",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LPN",
            "in": "query",
            "description": "LPN, Pallet ID that is",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LocationCode",
            "in": "query",
            "description": "Location Code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LotNumber",
            "in": "query",
            "description": "Lot Number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPInventoryByLocationDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPInventoryByLocationDtoPaginatedItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/warehouses": {
      "post": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Create Warehouse",
        "description": "Create a new external Warehouse.\r\n\r\nWarehouses are any officially designated location inventory ships from. It does not strictly have to be a warehouse management facility.\r\n\r\nAny kind of distribution center that handles inventory levels at the location falls under this.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Update Warehouse",
        "description": "Update an existing external Warehouse.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "List Warehouses",
        "description": "Obtains a list of Warehouses that match the specified criteria.",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDtoPaginatedItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/warehouses/{id}": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Get Warehouse",
        "description": "Get specific Warehouse by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDto"
                }
              }
            }
          },
          "400": {
            "description": "If it fails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelValidationErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Delete Warehouse",
        "description": "This endpoint soft deletes the Warehouse with the specified ID. \r\n\r\nIMPORTANT: This will also delete the following entities associated with the warehouse:\r\n- Warehouse Items for that warehouse\r\n- Storefronts for that warehouse\r\n  - Order Groups for those storefronts\r\n  - Storefront Products for those storefronts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/inventory/shipments/{id}": {
      "get": {
        "tags": [
          "WarehouseShipments"
        ],
        "summary": "Get Warehouse Shipment",
        "description": "Get specific Item by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/inventory/shipments/warehouseTransfer": {
      "post": {
        "tags": [
          "WarehouseShipments"
        ],
        "summary": "Request/Create Warehouse Transfer",
        "description": "Request/Create a Warehouse Transfer",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDtoGenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDtoGenericSuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/inventory/shipments/asn": {
      "post": {
        "tags": [
          "WarehouseShipments"
        ],
        "summary": "Create ASN",
        "description": "Create an ASN going to an Connect managed Warehouse",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDtoGenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDtoGenericSuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/inventory/shipments/{id}/confirmReceived": {
      "put": {
        "tags": [
          "WarehouseShipments"
        ],
        "description": "Confirm the Shipment was Received",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentConfirmReceivedReq"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentConfirmReceivedReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentConfirmReceivedReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseShipmentConfirmReceivedReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/inventory/shipments/{id}/markInTransit": {
      "put": {
        "tags": [
          "WarehouseShipments"
        ],
        "description": "Mark In Transit the Shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/inventory/shipments/{id}/cancel": {
      "put": {
        "tags": [
          "WarehouseShipments"
        ],
        "description": "Cancel the Shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericSuccessMessage"
                }
              }
            }
          }
        }
      }
    },
    "/v2/inventory/shipments": {
      "get": {
        "tags": [
          "WarehouseShipments"
        ],
        "summary": "List Warehouse Shipments",
        "description": "Obtains a list of Warehouse Shipments that match the specified criteria.",
        "parameters": [
          {
            "name": "PurchaseOrderId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PurchaseOrderNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BrandId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ToWarehouseId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FromWarehouseId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "WarehouseProductId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Item",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Can Be:\r\n\r\nASN = 0,\r\nWarehouseTransfer = 1",
            "schema": {
              "$ref": "#/components/schemas/WarehouseShipmentType"
            }
          },
          {
            "name": "ReferenceNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Allowed values: CreateDate (default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDtoPaginatedItemsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseShipmentDtoPaginatedItemsResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AutomationWebhookDto": {
        "required": [
          "enabled",
          "name",
          "onEvent",
          "storefrontId",
          "toURL"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of Automation"
          },
          "storefrontId": {
            "minLength": 1,
            "type": "string",
            "description": "Storefront Id"
          },
          "onEvent": {
            "minLength": 1,
            "type": "string",
            "description": "Triggered On Event\r\nPossible Values:\r\n\r\nORDER_CREATED,\r\nORDER_UPDATED,\r\nORDER_FULFILLED,\r\nORDER_SHIPPED,\r\nORDER_RECEIVED,\r\nORDER_CANCELLED,\r\n\r\nORDER_SPLIT,\r\nORDER_RESHIPPED,\r\n\r\nSHIPMENT_CREATED,\r\nSHIPMENT_UPDATED,\r\nSHIPMENT_RECEIVED,\r\nSHIPMENT_SHIPPED,\r\nSHIPMENT_CANCELLED\r\n\r\nWARESHIPMENT_CREATED \r\nWARESHIPMENT_UPDATED\r\nWARESHIPMENT_SHIPPED\r\nWARESHIPMENT_RECEIVED\r\n\r\nPURCHASE_ORDER_CREATED\r\nPURCHASE_ORDER_UPDATED\r\n\r\nBULK_SHIPMENT_CREATED\r\nBULK_SHIPMENT_UPDATED\r\nBULK_SHIPMENT_SHIPPED"
          },
          "toURL": {
            "minLength": 1,
            "type": "string",
            "description": "Webhook URL"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled"
          }
        },
        "additionalProperties": false
      },
      "AutomationWebhookDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomationWebhookDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "BrandDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Autogenerated. Read-Only.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 2,
            "type": "string",
            "description": "Name"
          },
          "code": {
            "type": "string",
            "description": "Code",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "BrandDto"
      },
      "BulkOrderProcessingResponse": {
        "type": "object",
        "properties": {
          "hasErrors": {
            "type": "boolean"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderProcessingResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkShipmentDto": {
        "required": [
          "brandId",
          "orderStatus"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Autogenerated. Read-Only.",
            "nullable": true
          },
          "orderNumber": {
            "type": "string",
            "description": "Orde rNumber",
            "nullable": true
          },
          "customReferenceNumber": {
            "type": "string",
            "description": "Custom Reference Number",
            "nullable": true
          },
          "customerPo": {
            "type": "string",
            "description": "Customer PO",
            "nullable": true
          },
          "billOfLading": {
            "type": "string",
            "description": "Bill Of Lading",
            "nullable": true
          },
          "carrierShippedWith": {
            "type": "string",
            "description": "Carrier Shipped With",
            "nullable": true
          },
          "serviceShippedWith": {
            "type": "string",
            "description": "Service Shipped With",
            "nullable": true
          },
          "carrierTrackingNumber": {
            "type": "string",
            "description": "Tracking Number, if applicable",
            "nullable": true
          },
          "shipDateTimeUtc": {
            "type": "string",
            "description": "Shipped At",
            "format": "date-time",
            "nullable": true
          },
          "orderStatus": {
            "minLength": 1,
            "type": "string",
            "description": "Order Status"
          },
          "fromWarehouseId": {
            "type": "string",
            "description": "From Warehouse Id",
            "nullable": true
          },
          "brandId": {
            "minLength": 1,
            "type": "string",
            "description": "Brand Id"
          },
          "shipTo": {
            "$ref": "#/components/schemas/ShipAddressDto"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkShipmentItemDto"
            },
            "description": "Items",
            "nullable": true
          },
          "createDateTimeUtc": {
            "type": "string",
            "description": "When the order was created. Read-Only.",
            "format": "date-time"
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "description": "When the order was last modified. Read-Only.",
            "format": "date-time"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Bulk Shipment Dto"
      },
      "BulkShipmentDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkShipmentDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "BulkShipmentItemDto": {
        "type": "object",
        "properties": {
          "item": {
            "type": "string",
            "description": "Item",
            "nullable": true
          },
          "grossWeight": {
            "type": "number",
            "description": "Gross Weight, for all units (qty) shipped, in lbs.",
            "format": "double",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "format": "double"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldDto"
            },
            "description": "Custom Fields",
            "nullable": true
          },
          "fulfillmentInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentInfoItemDto"
            },
            "description": "Fulfillment Info",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomFieldDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DIUUpdateType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Can be:\r\n\r\nReduce = 0\r\n\r\nIncrease = 1",
        "format": "int32"
      },
      "FulfillmentInfoItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lotNumber": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "lpn": {
            "type": "string",
            "nullable": true
          },
          "serialNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Fulfillment Info Item Dto"
      },
      "GenericErrorMessage": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GenericSuccessMessage": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryAdjustmentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "brandId": {
            "type": "string",
            "description": "Brand",
            "nullable": true
          },
          "warehouseId": {
            "type": "string",
            "description": "Warehouse",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/DIUUpdateType"
          },
          "warehouseProductId": {
            "type": "string",
            "description": "Warehouse Product",
            "nullable": true
          },
          "item": {
            "type": "string",
            "description": "Warehouse Product SKU",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Warehouse Product SKU",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration Date",
            "format": "date-time",
            "nullable": true
          },
          "lotNumber": {
            "type": "string",
            "description": "Lot Number",
            "nullable": true
          },
          "referenceNumber": {
            "type": "string",
            "description": "Reference Number",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "Can be:\r\n\r\nOTHER, \r\nDAMAGED, \r\nKIT_ASSEMBLY, \r\nKIT_DISASSEMBLY, \r\nCOUNT_WAS_WRONG, \r\nCYCLE_COUNT, \r\nRETURN, \r\nDESTROYED, \r\nEXPIRED, \r\nSAMPLE, \r\nMISSING, \r\nSHIPMENT_WRONG_INPUT, \r\n\r\n...",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "nullable": true
          },
          "lpn": {
            "type": "string",
            "description": "LPN",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "format": "double"
          },
          "fromWMS": {
            "type": "boolean",
            "description": "FromWMS"
          },
          "createDateTimeUtc": {
            "type": "string",
            "description": "Created At",
            "format": "date-time"
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "description": "Modified At",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Inventory Adjustment Dto"
      },
      "InventoryAdjustmentDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryAdjustmentDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "InventoryStatus": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Inventory Status\r\n\r\nCan Be: \r\n\r\n      0 - Normal,\r\n      1 - Warning,\r\n      2 - Urgent",
        "format": "int32"
      },
      "ModelValidationErrorMessage": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrderCustomDataDto": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OrderDto": {
        "required": [
          "items",
          "orderKey",
          "orderNumber",
          "orderStatus",
          "requestedShippingService",
          "shipTo"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Connect Internal Order ID. Read-Only. Autogenerated.",
            "nullable": true
          },
          "shipstationOrderId": {
            "type": "string",
            "description": "ShipStation Internal Order ID. Only available for ShipStation orders. Read-Only.",
            "nullable": true
          },
          "orderNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Order Number. Should be unique for that storefront! Required."
          },
          "orderKey": {
            "minLength": 1,
            "type": "string",
            "description": "Order Key. The ID for the order in the source system, used to identify the order by the storefront. Must be unique for that st orefront. Required."
          },
          "createDateTimeUtc": {
            "type": "string",
            "description": "When the order was created. Read-Only.",
            "format": "date-time"
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "description": "When the order was last modified. Read-Only.",
            "format": "date-time"
          },
          "orderDateTimeUtc": {
            "type": "string",
            "description": "When the order was placed in the source system.  Required.",
            "format": "date-time"
          },
          "paymentDateTimeUtc": {
            "type": "string",
            "description": "When the user paid for the order",
            "format": "date-time",
            "nullable": true
          },
          "shipByDateTimeUtc": {
            "type": "string",
            "description": "When the order is supposed to ship at.",
            "format": "date-time",
            "nullable": true
          },
          "shipDateUtc": {
            "type": "string",
            "description": "When the order shipped.",
            "format": "date-time",
            "nullable": true
          },
          "orderStatus": {
            "minLength": 1,
            "type": "string",
            "description": "The Order Status can be one of the following values:\r\n- awaiting_payment - not yet paid for\r\n- awaiting_shipment - not yet fulfilled (sent to the warehouse)\r\n- on_hold\r\n- pending_fulfillment - For orders that should not be updated, as they are already being processed by the warehouse. \r\nConnect does not allow updating these orders, expect via the order status change endpoint.\r\n- shipped\r\n- cancelled"
          },
          "customerUsername": {
            "type": "string",
            "description": "Username of the customer in the source system. Can be email, number or some string ID.",
            "nullable": true
          },
          "customerEmail": {
            "type": "string",
            "description": "Email Address of the Customer",
            "format": "email",
            "nullable": true
          },
          "billTo": {
            "$ref": "#/components/schemas/ShipAddressDto"
          },
          "shipTo": {
            "$ref": "#/components/schemas/ShipAddressDto"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDto"
            },
            "description": "Order Items, required to have at least one, non-adjustment line item.  Required."
          },
          "orderTotal": {
            "type": "number",
            "description": "Autocalculated. Read-Only.",
            "format": "double",
            "nullable": true
          },
          "amountPaid": {
            "type": "number",
            "description": "Not autocalculated. Specified by storefront.",
            "format": "double",
            "nullable": true
          },
          "shippingAmount": {
            "type": "number",
            "description": "Not autocalculated. Specified by storefront.",
            "format": "double",
            "nullable": true
          },
          "taxAmount": {
            "type": "number",
            "description": "Not autocalculated. Specified by storefront.",
            "format": "double",
            "nullable": true
          },
          "customerNotes": {
            "type": "string",
            "description": "Notes the customer sent to the store/warehouse.",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "description": "Internal Notes not visible to the customer.",
            "nullable": true
          },
          "gift": {
            "type": "boolean",
            "description": "If it is a gift, defaults to false.",
            "nullable": true
          },
          "giftMessage": {
            "type": "string",
            "nullable": true
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment Method. Can be any value.",
            "nullable": true
          },
          "requestedShippingService": {
            "minLength": 1,
            "type": "string",
            "description": "The ID of the Requested Shipping Service. Used to identify what carrier and service the order should ship with. \r\n\r\nCan be any alphanumerical value, spaces, dashes, and underscores allowed.\r\n\r\nFor example: UPS_2DAYGROUND\r\n\r\nRequired."
          },
          "carrierCode": {
            "type": "string",
            "nullable": true
          },
          "serviceCode": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "$ref": "#/components/schemas/ShipWeightDto"
          },
          "dimensions": {
            "$ref": "#/components/schemas/ShipDimensionDto"
          },
          "tagIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Order Tags.",
            "nullable": true
          },
          "orderGroupId": {
            "type": "string",
            "description": "Connect Specific, Order Group ID\r\n\r\nOnce set cannot be changed!",
            "nullable": true
          },
          "sourceOfOrder": {
            "type": "string",
            "description": "Connect Specific, How the order entered the Connect System. Read-Only. [ShipStation, ConnectAPI]",
            "nullable": true
          },
          "storefrontId": {
            "type": "string",
            "description": "Connect Specific, the Storefront ID, a Storefront is equivalent to a ShipStation account, the default one will be used if not set.\r\n\r\nOnce set cannot be changed!",
            "nullable": true
          },
          "fulfilledByService": {
            "type": "string",
            "description": "Connect Specific, the Fulfilled By Service. Read-Only",
            "nullable": true
          },
          "onHoldReason": {
            "type": "string",
            "description": "Connect Specific, the reason why the order went to on hold, if automatically put on hold, reasons would be something like:\r\nShipCode Not Configured, Not Enough Inventory, No Order Items... Read-Only.",
            "nullable": true
          },
          "holdUntilDate": {
            "type": "string",
            "description": "ShipStation only, specific on hold until date. Read-Only.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "ShipStation specific. ShipStation UserId. Read Only.",
            "nullable": true
          },
          "externallyFulfilled": {
            "type": "boolean",
            "description": "ShipStation specific. Externally Fulfilled Flag. Read Only.",
            "nullable": true
          },
          "externallyFulfilledBy": {
            "type": "string",
            "description": "ShipStation specific. Externally Fulfilled Flag. Read Only.",
            "nullable": true
          },
          "insuranceOptions": {
            "$ref": "#/components/schemas/ShipInsuranceOptionsDto"
          },
          "internationalOptions": {
            "$ref": "#/components/schemas/ShipInternationalOptionsDto"
          },
          "advancedOptions": {
            "$ref": "#/components/schemas/ShipAdvancedOptionsDto"
          },
          "packageCode": {
            "type": "string",
            "description": "ShipStation specific. Read Only.",
            "nullable": true
          },
          "splitOrderIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Order Ids for split orders that were originally part of this. Read Only.",
            "nullable": true
          },
          "confirmation": {
            "type": "string",
            "description": "ShipStation specific. Read Only.",
            "nullable": true
          },
          "parentReshipOrderId": {
            "type": "string",
            "description": "Reship Parent Order Id. Read Only.",
            "nullable": true
          },
          "parentSplitOrderId": {
            "type": "string",
            "description": "Split Parent Order Id. Read Only.",
            "nullable": true
          },
          "customData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCustomDataDto"
            },
            "description": "Custom Data Fields. Name key must be unique for this order. Must use uppercase letters, numbers, and underscores only for the Name!",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "OrderGroupDto": {
        "required": [
          "name",
          "storefrontId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of Order Group."
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "publicEmail": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "createDateTimeUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "Read-Only. The Source that created the Order Group. [Shipstation, ConnectAPI]",
            "nullable": true
          },
          "storefrontId": {
            "minLength": 1,
            "type": "string",
            "description": "The Storefront it is associated with. Cannot be changed once set."
          },
          "shipstationId": {
            "type": "string",
            "description": "Read-Only. For ShipStation Storefronts.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderGroupDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderGroupDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "OrderItemDto": {
        "type": "object",
        "properties": {
          "orderItemId": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "shipstationOrderItemId": {
            "type": "string",
            "description": "ShipStation Order Item Id. Read-Only.",
            "nullable": true
          },
          "lineItemKey": {
            "type": "string",
            "description": "Id of the Order Item in the source system.",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "description": "Storefront Product SKU. Required.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Storefront Product Name. Required.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "Order Item ImageUrl. Required.",
            "nullable": true
          },
          "weight": {
            "$ref": "#/components/schemas/ShipWeightDto"
          },
          "quantity": {
            "type": "integer",
            "description": "How Many Ordered. Required.",
            "format": "int64",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "description": "Price per Unit. Required.",
            "format": "double",
            "nullable": true
          },
          "taxAmount": {
            "type": "number",
            "description": "Price of Tax (total). Required.",
            "format": "double",
            "nullable": true
          },
          "shippingAmount": {
            "type": "number",
            "description": "Price of Shipping (total).  Required.",
            "format": "double",
            "nullable": true
          },
          "fulfillmentSku": {
            "type": "string",
            "description": "SKU that will be used for fulfillment. Note leave as null if you want to use the same sku for fulfillment and general item mangement.",
            "nullable": true
          },
          "adjustment": {
            "type": "boolean",
            "description": "Is this line item an adjustment item (like a coupon for example). Required.",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "nullable": true
          },
          "createDateTimeUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "storefrontProductId": {
            "type": "string",
            "description": "Storefront Product Id. Read-Only.\r\n\r\nIMPORTANT: If the Storefront Product with the specified Sku cannot be found, it will be autocreated based on this order line item.",
            "nullable": true
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "description": "Connect specific. Read-Only.",
            "format": "date-time",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Connect specific. Read-Only.",
            "nullable": true
          },
          "storefrontId": {
            "type": "string",
            "description": "Connect specific. Read-Only.",
            "nullable": true
          },
          "warehouseLocation": {
            "type": "string",
            "description": "ShipStation specific. Read-Only.",
            "nullable": true
          },
          "shipstationProductId": {
            "type": "string",
            "description": "ShipStation specific. Read-Only.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderItemReturnDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "description": "Sku",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "orderReturnId": {
            "type": "string",
            "description": "Order Return Id",
            "nullable": true
          },
          "orderItemId": {
            "type": "string",
            "description": "Order Item Id",
            "nullable": true
          },
          "lotNumber": {
            "type": "string",
            "description": "Lot Number",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration Date",
            "format": "date-time",
            "nullable": true
          },
          "lineItemKey": {
            "type": "string",
            "description": "Line Item Key",
            "nullable": true
          },
          "weight": {
            "$ref": "#/components/schemas/ShipWeightDto"
          },
          "quantityOriginal": {
            "type": "integer",
            "description": "Quantity Originally Shipped",
            "format": "int64",
            "nullable": true
          },
          "quantityExpected": {
            "type": "integer",
            "description": "Quantity Expected to Return",
            "format": "int64",
            "nullable": true
          },
          "quantityRestocked": {
            "type": "integer",
            "description": "Quantity Received and Restocked",
            "format": "int64",
            "nullable": true
          },
          "quantityDamaged": {
            "type": "integer",
            "description": "Quantity Received as Damaged",
            "format": "int64",
            "nullable": true
          },
          "createDateTimeUtc": {
            "type": "string",
            "description": "Created At",
            "format": "date-time"
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "description": "Modified At",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Order Return Item Dto"
      },
      "OrderProcessingResponse": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderNumber": {
            "type": "string",
            "nullable": true
          },
          "orderKey": {
            "type": "string",
            "nullable": true
          },
          "success": {
            "type": "boolean"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderReturnDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "referenceNumber": {
            "type": "string",
            "description": "Reference Number",
            "nullable": true
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking Number",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Order Id",
            "nullable": true
          },
          "storefrontId": {
            "type": "string",
            "description": "Storefront Id",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status",
            "nullable": true
          },
          "returnAddress": {
            "$ref": "#/components/schemas/ShipAddressDto"
          },
          "originAddress": {
            "$ref": "#/components/schemas/ShipAddressDto"
          },
          "toWarehouseId": {
            "type": "string",
            "description": "Returned to what Warehouse",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemReturnDto"
            },
            "description": "Return Items",
            "nullable": true
          },
          "createDateTimeUtc": {
            "type": "string",
            "description": "Created At",
            "format": "date-time"
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "description": "Modified At",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Order Return Dto"
      },
      "OrderReturnDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderReturnDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "OrderTagDto": {
        "required": [
          "storefrontId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name, must be unique for the storefront in question.",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "Color",
            "nullable": true
          },
          "useFor": {
            "type": "string",
            "description": "Automatically Used for what event. Read-Only.",
            "nullable": true
          },
          "storefrontId": {
            "minLength": 1,
            "type": "string",
            "description": "The Storefront it is associated with. Cannot be changed once set."
          },
          "shipstationId": {
            "type": "string",
            "description": "Read-Only. For ShipStation Storefronts.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderTagDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderTagDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderDto": {
        "required": [
          "brandId",
          "orderNumber",
          "vendorId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "orderNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Order Number"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/PurchaseOrderState"
          },
          "vendorId": {
            "minLength": 1,
            "type": "string",
            "description": "Vendor"
          },
          "expectedDate": {
            "type": "string",
            "description": "Expected Date",
            "format": "date-time",
            "nullable": true
          },
          "reviewedDate": {
            "type": "string",
            "description": "Reviewed Date",
            "format": "date-time",
            "nullable": true
          },
          "shippingFee": {
            "type": "number",
            "description": "Shipping Fee",
            "format": "double"
          },
          "otherFees": {
            "type": "number",
            "description": "Other Fees",
            "format": "double"
          },
          "discounts": {
            "type": "number",
            "description": "Discounts",
            "format": "double"
          },
          "tax": {
            "type": "number",
            "description": "Tax",
            "format": "double"
          },
          "shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarehouseShipmentDto"
            },
            "description": "Shipments",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderItemDto"
            },
            "description": "Items",
            "nullable": true
          },
          "brandId": {
            "minLength": 1,
            "type": "string",
            "description": "Brand"
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "nullable": true
          },
          "createDateTimeUtc": {
            "type": "string",
            "description": "Created At",
            "format": "date-time"
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "description": "Modified At",
            "format": "date-time"
          },
          "externalRefNum": {
            "type": "string",
            "description": "External Reference",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderDtoGenericSuccessMessage": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "item": {
            "$ref": "#/components/schemas/PurchaseOrderDto"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderItemDto": {
        "type": "object",
        "properties": {
          "item": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "itemCost": {
            "type": "number",
            "format": "double"
          },
          "createDateTimeUtc": {
            "type": "string",
            "format": "date-time"
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderState": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "Order Status\r\n\r\n\r\nCan Be:\r\n\r\n       0 - Open, awaiting for items to ship\r\n       1 - Requested\r\n       2 - Denied\r\n       3 - Completed\r\n       4 - Canceled\r\n       5 - Active\r\n       6 - On hold (awaiting approval)",
        "format": "int32"
      },
      "RateEstimationCharge": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "chargeType": {
            "$ref": "#/components/schemas/RatesChargeType"
          },
          "chargeDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RateEstimationItemResponse": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string",
            "description": "ZoneId",
            "nullable": true
          },
          "shipCodeId": {
            "type": "string",
            "description": "The shipcode ID used to estimate the ship total",
            "nullable": true
          },
          "baseServiceAmount": {
            "type": "number",
            "description": "Base Service charges amount",
            "format": "double"
          },
          "transportationAmount": {
            "type": "number",
            "description": "How much it costs to transport the storefront order",
            "format": "double"
          },
          "totalAmount": {
            "type": "number",
            "description": "The total amount",
            "format": "double",
            "readOnly": true
          },
          "currency": {
            "type": "string",
            "description": "The currency in which the charges are in",
            "nullable": true
          },
          "itemizedCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateEstimationCharge"
            },
            "description": "A list of all the individual charges. Not recommended to show to end customers.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RateEstimationResponse": {
        "type": "object",
        "properties": {
          "itemsWeight": {
            "$ref": "#/components/schemas/ShipWeightDto"
          },
          "packagingWeight": {
            "$ref": "#/components/schemas/ShipWeightDto"
          },
          "chargeWeight": {
            "$ref": "#/components/schemas/ShipWeightDto"
          },
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateEstimationItemResponse"
            },
            "description": "A list of all the individual charges. Not recommended to show to end customers.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RateEstimationWeightInfoRequest": {
        "type": "object",
        "properties": {
          "itemsWeight": {
            "$ref": "#/components/schemas/ShipWeightDto"
          },
          "packagingWeight": {
            "$ref": "#/components/schemas/ShipWeightDto"
          }
        },
        "additionalProperties": false
      },
      "RatesChargeType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "ShipAddressDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Full Customer Name"
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "street1": {
            "type": "string",
            "nullable": true
          },
          "street2": {
            "type": "string",
            "nullable": true
          },
          "street3": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "Full City Name",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State/Region ID, two letters for US States.",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "Postal Code",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone Number",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country Code, two letters.",
            "nullable": true
          },
          "residential": {
            "type": "boolean",
            "nullable": true
          },
          "addressVerified": {
            "type": "string",
            "description": "ShipStation specific. Read-Only. Note: Connect does not support address verification internally.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipAdvancedOptionsDto": {
        "type": "object",
        "properties": {
          "warehouseId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "nonMachinable": {
            "type": "boolean",
            "nullable": true
          },
          "saturdayDelivery": {
            "type": "boolean",
            "nullable": true
          },
          "containsAlcohol": {
            "type": "boolean",
            "nullable": true
          },
          "customField1": {
            "type": "string",
            "nullable": true
          },
          "customField2": {
            "type": "string",
            "nullable": true
          },
          "customField3": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "mergedOrSplit": {
            "type": "boolean",
            "nullable": true
          },
          "mergedIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "billToParty": {
            "type": "string",
            "nullable": true
          },
          "billToAccount": {
            "type": "string",
            "nullable": true
          },
          "billToPostalCode": {
            "type": "string",
            "nullable": true
          },
          "billToCountryCode": {
            "type": "string",
            "nullable": true
          },
          "billToMyOtherAccount": {
            "type": "string",
            "nullable": true
          },
          "storeId": {
            "type": "integer",
            "description": "ShipStation Store ID",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "ShipStation Advanced Options"
      },
      "ShipDimensionDto": {
        "type": "object",
        "properties": {
          "units": {
            "type": "string",
            "nullable": true
          },
          "length": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "width": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "height": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Package Dimensions expected"
      },
      "ShipInsuranceOptionsDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "nullable": true
          },
          "insureShipment": {
            "type": "boolean",
            "nullable": true
          },
          "insuredValue": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "ShipStation Insurance Options, set as null for Connect only integration"
      },
      "ShipInternationalOptionsDto": {
        "type": "object",
        "properties": {
          "contents": {
            "type": "string",
            "nullable": true
          },
          "nonDelivery": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "ShipStation International Options, set as null for Connect only integration"
      },
      "ShipWeightDto": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "units": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Weight"
      },
      "ShipmentDto": {
        "type": "object",
        "properties": {
          "shipmentId": {
            "type": "string",
            "description": "Connect Specific. Read-Only. Autogenerated.",
            "nullable": true
          },
          "shipstationOrderId": {
            "type": "string",
            "description": "ShipStation Specific. Read-Only. Set to null for Connect orders.",
            "nullable": true
          },
          "shipstationShipmentId": {
            "type": "string",
            "description": "ShipStation Specific. Read-Only. Set to null for Connect orders.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "ShipStation Specific. Read-Only. Set to null for Connect orders.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Read-Only. Related Order info.",
            "nullable": true
          },
          "orderKey": {
            "type": "string",
            "description": "Read-Only. Related Order info.",
            "nullable": true
          },
          "orderNumber": {
            "type": "string",
            "description": "Read-Only. Related Order info.",
            "nullable": true
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking Number supplied by Carrier.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "Created At (Pacific Timezone)",
            "format": "date-time",
            "nullable": true
          },
          "shipDate": {
            "type": "string",
            "description": "Shipped At (Pacific Timezone)",
            "format": "date-time",
            "nullable": true
          },
          "shipmentCost": {
            "type": "number",
            "description": "Shipping Cost",
            "format": "double",
            "nullable": true
          },
          "insuranceCost": {
            "type": "number",
            "description": "Insurance Cost. ShipStation specific.",
            "format": "double",
            "nullable": true
          },
          "isReturnLabel": {
            "type": "boolean",
            "description": "ShipStation specific."
          },
          "batchNumber": {
            "type": "string",
            "description": "ShipStation specific.",
            "nullable": true
          },
          "carrierCode": {
            "type": "string",
            "description": "Carrier that shipped with",
            "nullable": true
          },
          "serviceCode": {
            "type": "string",
            "description": "Service that shipped with",
            "nullable": true
          },
          "packageCode": {
            "type": "string",
            "description": "ShipStation specific.",
            "nullable": true
          },
          "confirmation": {
            "type": "string",
            "description": "ShipStation specific.",
            "nullable": true
          },
          "warehouseId": {
            "type": "string",
            "description": "ShipStation specific.",
            "nullable": true
          },
          "voided": {
            "type": "boolean",
            "description": "If the Shipment was voided. ShipStation specific."
          },
          "voidDate": {
            "type": "string",
            "description": "The Shipment was voided  when. ShipStation specific.",
            "format": "date-time",
            "nullable": true
          },
          "marketplaceNotified": {
            "type": "boolean",
            "description": "ShipStation specific."
          },
          "shipTo": {
            "$ref": "#/components/schemas/ShipAddressDto"
          },
          "weight": {
            "$ref": "#/components/schemas/ShipWeightDto"
          },
          "dimensions": {
            "$ref": "#/components/schemas/ShipDimensionDto"
          },
          "insuranceOptions": {
            "$ref": "#/components/schemas/ShipInsuranceOptionsDto"
          },
          "shipmentItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentItemDto"
            },
            "description": "Items that were shipped.",
            "nullable": true
          },
          "trackingUrl": {
            "type": "string",
            "description": "Tracking URL, if supplied by carrier.",
            "nullable": true
          },
          "receiveDate": {
            "type": "string",
            "description": "Received At",
            "format": "date-time",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Additional Notes. Internal Log.",
            "nullable": true
          },
          "storefrontId": {
            "type": "string",
            "description": "Storefront Id",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of Shipment. Can be: Created, Shipped, InTransit, LostInTransit, DamagedInTransit Cancelled, Received.\r\n\r\n\r\nNote that Connect does not do shipment tracking  for all carriers and storefronts. \r\n\r\nIn those cases the Shipment will not be moved from it's initial Created state.",
            "nullable": true
          },
          "fulfilledByService": {
            "type": "string",
            "description": "Fulfilled By. Can be TPL, Landmark, Crane, ConnectAPI....",
            "nullable": true
          },
          "externalShipmentId": {
            "type": "string",
            "description": "Id of Shipment in the External Fulfillment Service.",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentEventDto"
            },
            "description": "Shipment Events, check for more in depth tracking information.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Shipment Entity"
      },
      "ShipmentDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "ShipmentEventDto": {
        "type": "object",
        "properties": {
          "eventAtDateTimeUtc": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "type": "string",
            "nullable": true
          },
          "eventCode": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipmentItemDto": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string",
            "nullable": true
          },
          "fulfillmentSku": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "orderItemId": {
            "type": "string",
            "nullable": true
          },
          "shipmentId": {
            "type": "string",
            "nullable": true
          },
          "fulfillmentInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentInfoItemDto"
            },
            "description": "Fulfillment Info. Read-Only.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StoreProductStatsDto": {
        "required": [
          "id",
          "name",
          "sku"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "sku": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "isMapped": {
            "type": "boolean"
          },
          "isIgnored": {
            "type": "boolean"
          },
          "lastSoldDate": {
            "type": "string",
            "format": "date-time"
          },
          "storefrontId": {
            "type": "string",
            "nullable": true
          },
          "brandId": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "quantityOnHand": {
            "type": "integer",
            "format": "int32"
          },
          "quantityOnDemand": {
            "type": "integer",
            "format": "int32"
          },
          "quantityInTransit": {
            "type": "integer",
            "format": "int32"
          },
          "quantityAvailable": {
            "type": "integer",
            "format": "int32"
          },
          "soldPerWeekAvg": {
            "type": "number",
            "format": "double"
          },
          "inventoryStatus": {
            "$ref": "#/components/schemas/InventoryStatus"
          }
        },
        "additionalProperties": false
      },
      "StoreProductStatsDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreProductStatsDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "StorefrontDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Autogenerated. Read-Only.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Autogenerated. Read-Only.",
            "nullable": true
          },
          "brandId": {
            "type": "string",
            "description": "Brand it is associated with",
            "nullable": true
          },
          "warehouseId": {
            "type": "string",
            "description": "Warehouse it is associated with. \r\n\r\nA Storefront can only be set up to ship from a single warehouse.\r\nIf you have orders that ship from different warehouses, they need to be separated by storefront. \r\n\r\nMore then one storefront can ship from the same warehouse though.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Storefront Entity"
      },
      "StorefrontDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorefrontDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "StorefrontOrderRateEstimationRequest": {
        "type": "object",
        "properties": {
          "storefrontId": {
            "type": "string",
            "description": "The storefront you are checking against. Required.",
            "nullable": true
          },
          "shipCodeId": {
            "type": "string",
            "description": "The ship code ID, to use to get a rate. Optional. If not set, will calculate the rates for all available ship codes.",
            "nullable": true
          },
          "shipTo": {
            "$ref": "#/components/schemas/ShipAddressDto"
          },
          "weightInfo": {
            "$ref": "#/components/schemas/RateEstimationWeightInfoRequest"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorefrontOrderRateEstimationRequestItem"
            },
            "description": "The items to ship. If the items weight is not set, this list is required, to calculate the total item weight. If the SKU is not listed in the storefrontProducts, and not configured for fulfillment, the API endpoint will fail!",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StorefrontOrderRateEstimationRequestItem": {
        "required": [
          "quantity",
          "sku"
        ],
        "type": "object",
        "properties": {
          "sku": {
            "minLength": 1,
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "StorefrontProductDto": {
        "required": [
          "name",
          "sku",
          "storefrontId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Autogenerated. Read-Only.",
            "nullable": true
          },
          "sku": {
            "maxLength": 255,
            "minLength": 3,
            "type": "string",
            "description": "Item SKU, unique ID for this item in the storefront"
          },
          "productGroupId": {
            "type": "string",
            "description": "Group Id",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 2,
            "type": "string",
            "description": "Item Name/Description"
          },
          "storefrontId": {
            "minLength": 1,
            "type": "string",
            "description": "StorefrontId. Once set cannot be updated."
          },
          "price": {
            "type": "number",
            "description": "Default Price of the item when sold in the storefront.",
            "format": "double",
            "nullable": true
          },
          "length": {
            "type": "number",
            "description": "Length of Item, or it's box (inches)",
            "format": "double",
            "nullable": true
          },
          "width": {
            "type": "number",
            "description": "Width of Item, or it's box (inches)",
            "format": "double",
            "nullable": true
          },
          "height": {
            "type": "number",
            "description": "Height of Item, or it's box (inches)",
            "format": "double",
            "nullable": true
          },
          "weightOz": {
            "type": "number",
            "description": "Weight of Item, single unit, in ounces",
            "format": "double",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "description": "Product Type. Read-Only.",
            "nullable": true
          },
          "shipstationProductId": {
            "type": "string",
            "description": "ShipStation Specific. Product ID inside of ShipStation. Read-Only.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "StorefrontProductDto"
      },
      "StorefrontProductDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorefrontProductDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "UpdateOrderAsShippedByOrderIdRequestDto": {
        "type": "object",
        "properties": {
          "shipDate": {
            "type": "string",
            "description": "Ship Date",
            "format": "date-time",
            "nullable": true
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking Number",
            "nullable": true
          },
          "carrierCode": {
            "type": "string",
            "description": "Shipped with what Carrier, optional.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "UpdateOrderAsShippedByOrderIdRequestDto"
      },
      "UpdateOrderStatusRequestByOrderIdDto": {
        "required": [
          "orderStatus"
        ],
        "type": "object",
        "properties": {
          "orderStatus": {
            "minLength": 1,
            "type": "string",
            "description": "Order Key. The ID for the order in the source system, used to identify the order by the storefront."
          }
        },
        "additionalProperties": false,
        "description": "UpdateOrderStatusRequestDto"
      },
      "VendorDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Autogenerated. Read-Only.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 2,
            "type": "string",
            "description": "Name"
          }
        },
        "additionalProperties": false,
        "description": "VendorDto"
      },
      "WPInventoryByLocationDto": {
        "required": [
          "brandId",
          "description",
          "item",
          "locationCode",
          "lotNumber",
          "lpn",
          "shipmentReferenceNumber",
          "warehouseId",
          "warehouseProductId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Autogenerated. Read-Only.",
            "nullable": true,
            "example": "test"
          },
          "item": {
            "minLength": 1,
            "type": "string",
            "description": "Item SKU, unique ID. Read-Only."
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description/Name of the Item. Read-Only."
          },
          "warehouseProductId": {
            "minLength": 1,
            "type": "string",
            "description": "Warehouse Product Id"
          },
          "warehouseId": {
            "minLength": 1,
            "type": "string",
            "description": "WarehouseId. Once set cannot be changed."
          },
          "brandId": {
            "minLength": 1,
            "type": "string",
            "description": "BrandId. Once set cannot be changed."
          },
          "locationCode": {
            "minLength": 1,
            "type": "string",
            "description": "Location Code"
          },
          "lpn": {
            "minLength": 1,
            "type": "string",
            "description": "LPN, \"-\" of not set"
          },
          "lotNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Lot Number"
          },
          "shipmentReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Shipment Reference Number"
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration Date, null if not applicable",
            "format": "date-time",
            "nullable": true
          },
          "receivedQuantity": {
            "type": "number",
            "description": "Originaly Received Qty, before adjustments and fulfillments affected it",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "description": "On Hand",
            "format": "double"
          },
          "quantityAvailable": {
            "type": "number",
            "description": "Available",
            "format": "double"
          },
          "quantityOnHold": {
            "type": "number",
            "description": "On Hold",
            "format": "double"
          },
          "quantityUnavailable": {
            "type": "number",
            "description": "Unavailable",
            "format": "double"
          },
          "landingCost": {
            "type": "number",
            "description": "Landing Cost of goods",
            "format": "double"
          },
          "weightMetric": {
            "type": "number",
            "description": "Weight of items, in KG",
            "format": "double"
          },
          "isOnHold": {
            "type": "boolean",
            "description": "Is Pallet On Hold?"
          },
          "isQuarantined": {
            "type": "boolean",
            "description": "Is Pallet Quarantined?"
          }
        },
        "additionalProperties": false,
        "description": "Warehouse Product Inventory By Location Dto"
      },
      "WPInventoryByLocationDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WPInventoryByLocationDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "WarehouseDto": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Autogenerated. Read-Only.",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of Warehouse",
            "example": "test warehouse"
          },
          "code": {
            "minLength": 1,
            "type": "string",
            "description": "Short Code of Warehouse",
            "example": "WRHS-US1"
          },
          "addressBusinessName": {
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "nullable": true
          },
          "addressZipCode": {
            "type": "string",
            "nullable": true
          },
          "addressCity": {
            "type": "string",
            "nullable": true
          },
          "addressState": {
            "type": "string",
            "nullable": true
          },
          "addressCountryCode": {
            "type": "string",
            "nullable": true
          },
          "createDateTimeUtc": {
            "type": "string",
            "description": "Read-Only.",
            "format": "date-time"
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "description": "Read-Only.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "WarehouseDto"
      },
      "WarehouseDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarehouseDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "WarehouseItemStatsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "item": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "lastSoldDate": {
            "type": "string",
            "format": "date-time"
          },
          "storefrontId": {
            "type": "string",
            "nullable": true
          },
          "brandId": {
            "type": "string",
            "nullable": true
          },
          "quantityOnHand": {
            "type": "integer",
            "format": "int32"
          },
          "quantityInTransit": {
            "type": "integer",
            "format": "int32"
          },
          "quantityOnDemand": {
            "type": "integer",
            "format": "int32"
          },
          "quantityAvailable": {
            "type": "integer",
            "format": "int32"
          },
          "soldPerWeekAvg": {
            "type": "number",
            "format": "double"
          },
          "inventoryStatus": {
            "$ref": "#/components/schemas/InventoryStatus"
          }
        },
        "additionalProperties": false
      },
      "WarehouseItemStatsDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarehouseItemStatsDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "WarehouseProductDto": {
        "required": [
          "brandId",
          "description",
          "item",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Autogenerated. Read-Only.",
            "nullable": true,
            "example": "test"
          },
          "item": {
            "minLength": 1,
            "type": "string",
            "description": "Item SKU, unique ID to tell items apart inside warehouse and cross reference the same item across warehouses (inside the same brand)"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description/Name of the Item"
          },
          "warehouseProductGroupId": {
            "type": "string",
            "description": "Item Group Id",
            "nullable": true
          },
          "warehouseId": {
            "minLength": 1,
            "type": "string",
            "description": "WarehouseId. Once set cannot be changed."
          },
          "brandId": {
            "minLength": 1,
            "type": "string",
            "description": "BrandId. Once set cannot be changed."
          },
          "weight": {
            "type": "number",
            "description": "Weight, in ounces, for a single unit.",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "description": "Total Quantity in warehouse",
            "format": "double"
          },
          "quantityUnavailable": {
            "type": "number",
            "description": "Quantity Unavailable, due to being damaged, expired and the like.\r\n\r\nDifference between Quantity and QuantityUnavailable is the On Hand Quantity ready to be fulfilled against.",
            "format": "double"
          },
          "quantityDemand": {
            "type": "number",
            "description": "Available Quantity, when items on demand by storefront orders is accounted for. Read-Only.",
            "format": "double"
          },
          "quantityInTransit": {
            "type": "number",
            "description": "In Transit, incoming inventory from external location to this warehouse. Read-Only.",
            "format": "double"
          },
          "quantityAvail": {
            "type": "number",
            "description": "Available Quantity, when items on demand by storefront orders is accounted for. Read-Only. \r\n\r\n[QuantityAvail = Quantity - QuantityUnavailable - QuantityDemand]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "WarehouseProductDto"
      },
      "WarehouseProductDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarehouseProductDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "WarehouseProductInventorySummaryRequestDto": {
        "required": [
          "brandId",
          "item",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "item": {
            "minLength": 1,
            "type": "string",
            "description": "Item SKU"
          },
          "warehouseId": {
            "minLength": 1,
            "type": "string",
            "description": "WarehouseId."
          },
          "brandId": {
            "minLength": 1,
            "type": "string",
            "description": "BrandId."
          },
          "quantity": {
            "type": "number",
            "description": "Total Quantity in warehouse",
            "format": "double"
          },
          "quantityUnavailable": {
            "type": "number",
            "description": "Quantity Unavailable, due to being damaged, expired and the like.\r\n\r\nDifference between Quantity and QuantityUnavailable is the On Hand Quantity ready to be fulfilled against.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "WarehouseProductDto"
      },
      "WarehouseShipmentConfirmReceivedReq": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarehouseShipmentItemConfirmReceivedReq"
            },
            "description": "Items",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Attach a Note",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Confirm Shipment Received"
      },
      "WarehouseShipmentDto": {
        "required": [
          "brandId",
          "name",
          "referenceNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "createDateTimeUtc": {
            "type": "string",
            "description": "Created At. Read Only.",
            "format": "date-time"
          },
          "modifyDateTimeUtc": {
            "type": "string",
            "description": "Modified At. Read Only.",
            "format": "date-time"
          },
          "receivedAtDateTimeUtc": {
            "type": "string",
            "description": "Received At. Read Only.",
            "format": "date-time",
            "nullable": true
          },
          "expectedDateTimeUtc": {
            "type": "string",
            "description": "Expected Date",
            "format": "date-time",
            "nullable": true
          },
          "vendorId": {
            "type": "string",
            "description": "Vendor",
            "nullable": true
          },
          "brandId": {
            "minLength": 1,
            "type": "string",
            "description": "Brand"
          },
          "referenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Reference Number"
          },
          "billOfLading": {
            "type": "string",
            "description": "Brand",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/WarehouseShipmentType"
          },
          "fromWarehouseId": {
            "type": "string",
            "description": "From Warehouse Id, only available for WarehouseTransfer, otherwise null",
            "nullable": true
          },
          "toWarehouseId": {
            "type": "string",
            "description": "To Warehouse Id",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Shipment Name/Description"
          },
          "purchaseOrderId": {
            "type": "string",
            "description": "Purchase Order Id, if applicable",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarehouseShipmentItemDto"
            },
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "nullable": true
          },
          "packingListId": {
            "type": "string",
            "description": "Packing List Id",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "WarehouseShipmentDto"
      },
      "WarehouseShipmentDtoGenericSuccessMessage": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "item": {
            "$ref": "#/components/schemas/WarehouseShipmentDto"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WarehouseShipmentDtoPaginatedItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarehouseShipmentDto"
            },
            "nullable": true
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        },
        "additionalProperties": false
      },
      "WarehouseShipmentItemConfirmReceivedReq": {
        "type": "object",
        "properties": {
          "warehouseShipmentItemId": {
            "type": "string",
            "description": "Id of item",
            "nullable": true
          },
          "quantityReceived": {
            "type": "number",
            "description": "QTY Received",
            "format": "double"
          },
          "note": {
            "type": "string",
            "description": "Attach a Note",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Confirm Received"
      },
      "WarehouseShipmentItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-Only. Autogenerated.",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "Stack Weight, in KG",
            "format": "double"
          },
          "landingCost": {
            "type": "number",
            "description": "Total Value of Stack, NOT single unit value, in USD",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "description": "QTY",
            "format": "double"
          },
          "quantityReceived": {
            "type": "number",
            "description": "QTY Received. Read Only.",
            "format": "double"
          },
          "purchaseOrderItemId": {
            "type": "string",
            "description": "Purchase Order Item Id, if applicable",
            "nullable": true
          },
          "warehouseProductItem": {
            "type": "string",
            "description": "Warehouse Product Item",
            "nullable": true
          },
          "warehouseProductDescription": {
            "type": "string",
            "description": "Warehouse Product Description",
            "nullable": true
          },
          "warehouseProductId": {
            "type": "string",
            "description": "Warehouse Product Id",
            "nullable": true
          },
          "lotNumber": {
            "type": "string",
            "description": "Lot Number",
            "nullable": true
          },
          "lpn": {
            "type": "string",
            "description": "LPN",
            "nullable": true
          },
          "warehouseShipmentId": {
            "type": "string",
            "description": "Warehouse Shipment Id",
            "nullable": true
          },
          "expiresDateTimeUtc": {
            "type": "string",
            "description": "Expires At",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Warehouse Shipment Item"
      },
      "WarehouseShipmentType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Can Be:\r\n\r\nASN = 0,\r\nWarehouseTransfer = 1",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "http",
        "description": "Basic Authorization header using the Bearer scheme.",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}